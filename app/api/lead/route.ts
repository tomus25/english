import { NextRequest, NextResponse } from "next/server";

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID!;

// –ü—Ä–æ—Å—Ç–∞—è —ç–∫—Ä–∞–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è parse_mode: "HTML"
function escapeHTML(s: unknown) {
  return String(s ?? "")
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();

    // –ú—è–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const {
      studentName,
      goals,
      description,
      preferredMethod,
      contact,
      email,
      budget,
      currency,
      teacher,
      cookieConsent,
      // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ip/ua –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    } = body ?? {};

    if (!Array.isArray(goals)) {
      return NextResponse.json({ ok: false, error: "Invalid payload" }, { status: 400 });
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
    const lines: string[] = [];
    lines.push(`<b>üßë‚Äçüéì –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>`);
    lines.push(`–ò–º—è: <b>${escapeHTML(studentName)}</b>`);
    lines.push(`–¶–µ–ª–∏: ${escapeHTML(goals.join(", ")) || "‚Äî"}`);
    lines.push(`–û–ø–∏—Å–∞–Ω–∏–µ: ${escapeHTML(description) || "‚Äî"}`);
    lines.push(`–°–≤—è–∑–∞—Ç—å—Å—è: <b>${escapeHTML(preferredMethod)}</b> ‚Äî ${escapeHTML(contact || email || "‚Äî")}`);
    lines.push(`–ë—é–¥–∂–µ—Ç: ${budget != null && budget !== "" ? `<b>${escapeHTML(budget)} ${escapeHTML(currency)}</b>` : "‚Äî"}`);
    lines.push(`Cookie consent: ${cookieConsent === true ? "‚úÖ" : cookieConsent === false ? "‚ùå" : "‚Äî"}`);
    if (teacher) {
      lines.push("");
      lines.push(`<b>üë©‚Äçüè´ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</b>`);
      lines.push(`–ò–º—è: <b>${escapeHTML(teacher.name)}</b>`);
      if (teacher.telegram) lines.push(`Telegram: ${escapeHTML(teacher.telegram)}`);
      if (teacher.whatsapp) lines.push(`WhatsApp: ${escapeHTML(teacher.whatsapp)}`);
      if (teacher.instagram) lines.push(`Instagram: ${escapeHTML(teacher.instagram)}`);
      if (teacher.group) lines.push(`–ì—Ä—É–ø–ø–∞: ${escapeHTML(teacher.group)}`);
    }

    const text = lines.join("\n");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const tgResp = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text,
        parse_mode: "HTML",
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        reply_markup: {
          inline_keyboard: [
            preferredMethod === "telegram" && contact
              ? [{ text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url: `https://t.me/${String(contact).replace(/^@/, "")}` }]
              : null,
            preferredMethod === "instagram" && contact
              ? [{ text: "–û—Ç–∫—Ä—ã—Ç—å Instagram", url: `https://instagram.com/${String(contact).replace(/^@/, "")}` }]
              : null,
            preferredMethod === "whatsapp" && contact
              ? [{ text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp", url: `https://wa.me/${String(contact).replace(/[^\d]/g, "")}` }]
              : null,
            preferredMethod === "email" && email
              ? [{ text: "–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ", url: `mailto:${email}` }]
              : null,
          ].filter(Boolean),
        },
        disable_web_page_preview: true,
      }),
    });

    const tgJson = await tgResp.json();

    if (!tgResp.ok || !tgJson.ok) {
      console.error("Telegram error:", tgJson);
      return NextResponse.json({ ok: false, error: "Failed to send to Telegram" }, { status: 502 });
    }

    // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∑–¥–µ—Å—å –∂–µ –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î/CRM
    return NextResponse.json({ ok: true });
  } catch (e) {
    console.error(e);
    return NextResponse.json({ ok: false, error: "Server error" }, { status: 500 });
  }
}
