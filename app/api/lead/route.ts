import { NextRequest, NextResponse } from "next/server";
export const runtime = "nodejs"; // –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –Ω–æ —Ç–∞–∫ –Ω–∞–¥—ë–∂–Ω–µ–µ –Ω–∞ Vercel (Node)

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID!;

function escapeHTML(s: unknown) {
  return String(s ?? "").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
}

export async function POST(req: NextRequest) {
  try {
    if (!BOT_TOKEN || !CHAT_ID) {
      return NextResponse.json({ ok:false, error:"Missing env" }, { status: 500 });
    }

    const body = await req.json();
    const {
      studentName, goals = [], description, preferredMethod, contact, email,
      budget, currency, teacher, cookieConsent,
    } = body ?? {};

    if (!Array.isArray(goals)) {
      return NextResponse.json({ ok:false, error:"Invalid payload" }, { status: 400 });
    }

    const lines: string[] = [];
    lines.push(`<b>üßë‚Äçüéì –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>`);
    lines.push(`–ò–º—è: <b>${escapeHTML(studentName)}</b>`);
    lines.push(`–¶–µ–ª–∏: ${escapeHTML(goals.join(", ")) || "‚Äî"}`);
    lines.push(`–û–ø–∏—Å–∞–Ω–∏–µ: ${escapeHTML(description) || "‚Äî"}`);
    lines.push(`–°–≤—è–∑–∞—Ç—å—Å—è: <b>${escapeHTML(preferredMethod)}</b> ‚Äî ${escapeHTML(contact || email || "‚Äî")}`);
    lines.push(`–ë—é–¥–∂–µ—Ç: ${budget !== undefined && budget !== null && budget !== "" ? `<b>${escapeHTML(budget)} ${escapeHTML(currency)}</b>` : "‚Äî"}`);
    lines.push(`Cookie consent: ${cookieConsent === true ? "‚úÖ" : cookieConsent === false ? "‚ùå" : "‚Äî"}`);
    if (teacher) {
      lines.push("", `<b>üë©‚Äçüè´ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</b>`);
      lines.push(`–ò–º—è: <b>${escapeHTML(teacher.name)}</b>`);
      if (teacher.telegram)  lines.push(`Telegram: ${escapeHTML(teacher.telegram)}`);
      if (teacher.whatsapp)  lines.push(`WhatsApp: ${escapeHTML(teacher.whatsapp)}`);
      if (teacher.instagram) lines.push(`Instagram: ${escapeHTML(teacher.instagram)}`);
      if (teacher.group)     lines.push(`–ì—Ä—É–ø–ø–∞: ${escapeHTML(teacher.group)}`);
    }

    const tgResp = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: lines.join("\n"),
        parse_mode: "HTML",
        disable_web_page_preview: true,
      }),
    });
    const tgJson = await tgResp.json();

    if (!tgResp.ok || !tgJson.ok) {
      console.error("Telegram error:", tgJson);
      return NextResponse.json({ ok:false, error:"Failed to send to Telegram" }, { status: 502 });
    }

    return NextResponse.json({ ok:true });
  } catch (e) {
    console.error(e);
    return NextResponse.json({ ok:false, error:"Server error" }, { status: 500 });
  }
}
